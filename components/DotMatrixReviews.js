'use client';
import { useEffect, useRef } from 'react';

export default function DotMatrixReviews() {
    const canvasRef = useRef(null);

    useEffect(() => {
        const canvas = canvasRef.current;
        const ctx = canvas.getContext('2d');

        // === Matrix Config ===
        const CHAR_WIDTH = 5;
        const CHAR_HEIGHT = 54;
        const CHAR_SPACE = 1;
        const CHAR_COUNT = 100;
        const BUF_CHAR_COUNT = 500;

        const DM_WIDTH = CHAR_COUNT * (CHAR_WIDTH + CHAR_SPACE);
        const DM_HEIGHT = CHAR_HEIGHT;
        const BUF_WIDTH = BUF_CHAR_COUNT * (CHAR_WIDTH + CHAR_SPACE);

        const DOT_RADIUS = 3;
        const DOT_PAD = 1;
        const OUT_PAD = 5;
        const LED_COLOR = '#1e4';
        const FONT = {
            A: [0x0, 0x0, 0x0E, 0x11, 0x1F, 0x11, 0x11, 0x0, 0x0],
            B: [0x0, 0x0, 0x1E, 0x11, 0x1E, 0x11, 0x1E, 0x0, 0x0],
            C: [0x0, 0x0, 0x0F, 0x10, 0x10, 0x10, 0x0F, 0x0, 0x0],
            D: [0x0, 0x0, 0x1E, 0x11, 0x11, 0x11, 0x1E, 0x0, 0x0],
            E: [0x0, 0x0, 0x1F, 0x10, 0x1E, 0x10, 0x1F, 0x0, 0x0],
            F: [0x0, 0x0, 0x1F, 0x10, 0x1E, 0x10, 0x10, 0x0, 0x0],
            G: [0x0, 0x0, 0x0F, 0x10, 0x17, 0x11, 0x0F, 0x0, 0x0],
            H: [0x0, 0x0, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x0, 0x0],
            I: [0x0, 0x0, 0x0E, 0x04, 0x04, 0x04, 0x0E, 0x0, 0x0],
            J: [0x0, 0x0, 0x07, 0x02, 0x02, 0x12, 0x0C, 0x0, 0x0],
            K: [0x0, 0x0, 0x11, 0x12, 0x1C, 0x12, 0x11, 0x0, 0x0],
            L: [0x0, 0x0, 0x10, 0x10, 0x10, 0x10, 0x1F, 0x0, 0x0],
            M: [0x0, 0x0, 0x11, 0x1B, 0x15, 0x11, 0x11, 0x0, 0x0],
            N: [0x0, 0x0, 0x11, 0x19, 0x15, 0x13, 0x11, 0x0, 0x0],
            O: [0x0, 0x0, 0x0E, 0x11, 0x11, 0x11, 0x0E, 0x0, 0x0],
            P: [0x0, 0x0, 0x1E, 0x11, 0x1E, 0x10, 0x10, 0x0, 0x0],
            Q: [0x0, 0x0, 0x0E, 0x11, 0x15, 0x13, 0x0F, 0x0, 0x0],
            R: [0x0, 0x0, 0x1E, 0x11, 0x1E, 0x11, 0x11, 0x0, 0x0],
            S: [0x0, 0x0, 0x0F, 0x10, 0x0E, 0x01, 0x1E, 0x0, 0x0],
            T: [0x0, 0x0, 0x1F, 0x04, 0x04, 0x04, 0x04, 0x0, 0x0],
            U: [0x0, 0x0, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x0, 0x0],
            V: [0x0, 0x0, 0x11, 0x11, 0x0A, 0x0A, 0x04, 0x0, 0x0],
            W: [0x0, 0x0, 0x11, 0x11, 0x15, 0x1B, 0x11, 0x0, 0x0],
            X: [0x0, 0x0, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x0, 0x0],
            Y: [0x0, 0x0, 0x11, 0x11, 0x0A, 0x04, 0x04, 0x0, 0x0],
            Z: [0x0, 0x0, 0x1F, 0x02, 0x04, 0x08, 0x1F, 0x0, 0x0],
            '0': [0x0, 0x0, 0x1F, 0x13, 0x15, 0x19, 0x1F , 0x0, 0x0],
            '1': [0x0, 0x0, 0x4, 0xC, 0x4, 0x4, 0xE , 0x0, 0x0],
            '2': [0x0, 0x0, 0x1F, 0x01, 0x1F, 0x10, 0x1F , 0x0, 0x0],
            '3': [0x0, 0x0, 0x1F, 0x01, 0xF, 0x01, 0x1F , 0x0, 0x0],
            '4': [0x0, 0x0, 0x11, 0x11, 0x1F, 0x01, 0x01 , 0x0, 0x0],
            '5': [0x0, 0x0, 0x1F, 0x10, 0x1F, 0x01, 0x1F , 0x0, 0x0],
            '6': [0x0, 0x0, 0x1F, 0x10, 0x1F, 0x11, 0x1F , 0x0, 0x0],
            '7': [0x0, 0x0, 0x1F, 0x01, 0x7, 0x01, 0x01 , 0x0, 0x0],
            '8': [0x0, 0x0, 0x1F, 0x11, 0x1F, 0x11, 0x1F , 0x0, 0x0],
            '9': [0x0, 0x0, 0x1F, 0x11, 0x1F, 0x01, 0x1F , 0x0, 0x0],
            ' ': [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0],
            '.': [ 0x0, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x0],
            ',': [ 0x0, 0x00, 0x00, 0x00, 0x04, 0x08, 0x00, 0x00, 0x0],
            '!': [0x0, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04, 0x00, 0x0],
            '?': [0x0, 0x0E, 0x11, 0x01, 0x06, 0x00, 0x04, 0x00, 0x0],
            '\'': [0x0, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0],
            '"': [0x0, 0x0A, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0],
            ':': [0x0, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x0],
            ';': [0x0, 0x00, 0x04, 0x00, 0x00, 0x04, 0x08, 0x00, 0x0],
            '-': [0x0, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x0],
            '_': [0x0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x0],
            '=': [0x0, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x0],
            '+': [0x0, 0x00, 0x04, 0x04, 0x1F, 0x04, 0x04, 0x00, 0x0],
            '*': [ 0x0, 0x0, 0x0, 0x0A, 0x04, 0x0A, 0x0, 0x0, 0x0],
            '’': [0x00, 0x00, 0x00, 0x04, 0x08, 0x00, 0x00],
            '/': [0x0, 0x01, 0x02, 0x04, 0x08, 0x10, 0x00, 0x00, 0x0],
            '\\': [0x0, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x00, 0x0],
            '|': [0x0, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0],
            '<': [0x0, 0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02, 0x0],
            '>': [0x0, 0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08, 0x0],
            '(': [0x0, 0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02, 0x0],
            ')': [0x0, 0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x0],
            '[': [0x0, 0x06, 0x04, 0x04, 0x04, 0x04, 0x04, 0x06, 0x0],
            ']': [0x0, 0x0C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0C, 0x0],
            '{': [0x0, 0x02, 0x04, 0x04, 0x08, 0x04, 0x04, 0x02, 0x0],
            '}': [0x0, 0x08, 0x04, 0x04, 0x02, 0x04, 0x04, 0x08, 0x0],
            '#': [0x0, 0x0A, 0x1F, 0x0A, 0x0A, 0x1F, 0x0A, 0x00, 0x0],
            '@': [0x0, 0x0E, 0x11, 0x1D, 0x15, 0x1D, 0x10, 0x0F, 0x0],
            '$': [0x0, 0x04, 0x1F, 0x14, 0x1F, 0x05, 0x1F, 0x04, 0x0],
            '%': [0x0, 0x19, 0x19, 0x02, 0x04, 0x08, 0x13, 0x13, 0x0],
            '^': [0x0, 0x04, 0x0A, 0x11, 0x00, 0x00, 0x00, 0x00, 0x0],
            '&': [0x0, 0x06, 0x09, 0x06, 0x0A, 0x11, 0x0E, 0x00, 0x0],
            '~': [0x0, 0x08, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00, 0x0],
            '`': [0x0, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0],
        };

        const reviews = [
            '* We\'ve seen a 90% drop in support tickets and can finally focus on growing our business, not fixing tech issues. — Operations Manager, Mid-size Manufacturing Firm.',
            '* They helped us clean up a mess of systems and migrate to a secure, scalable cloud setup with no downtime. — CEO, Professional Services Firm.',
        ];

        let currentReview = 0;
        let scrollOffset = DM_WIDTH;

        const mat = new Array(BUF_WIDTH * DM_HEIGHT).fill(false);

        function set(x, y, v = false) {
            const i = x + y * BUF_WIDTH;
            mat[i] = v;
        }

        function sprite(x, y, image) {
            if (!image) return;
            for (let j = 0; j < image.length; j++) {
                const row = image[j];
                for (let i = 0; i < 5; i++) {
                    const col = (row >> (4 - i)) & 1;
                    const tx = x + i, ty = y + j;
                    if (tx < 0 || tx >= BUF_WIDTH || ty < 0 || ty >= DM_HEIGHT) continue;
                    if (col === 1) set(tx, ty, true);
                }
            }
        }

        function text(x, y, txt) {
            txt = txt.toUpperCase();
            let ox = 0;
            for (let i = 0; i < txt.length; i++) {
                sprite(x + ox, y, FONT[txt[i]] || FONT[' ']);
                ox += CHAR_WIDTH + CHAR_SPACE;
            }
        }

        function scroll(speed) {
            const old = mat.slice();
            for (let row = 0; row < DM_HEIGHT; row++) {
                for (let x = 0; x < BUF_WIDTH - 1; x++) {
                    const ti = x + speed + row * BUF_WIDTH;
                    const si = x + row * BUF_WIDTH;
                    if (ti >= 0 && ti < BUF_WIDTH * DM_HEIGHT)
                        mat[ti] = old[si];
                }
            }
        }

        const pad = DOT_PAD * 2;
        const rad = DOT_RADIUS + pad / 2;
        canvas.width = (DM_WIDTH * rad * 2) + OUT_PAD * 2;
        canvas.height = (DM_HEIGHT * rad * 2) + OUT_PAD * 2;
        canvas.style.width = "100%";
        canvas.style.height = "auto";

        function drawMatrix() {
            ctx.fillStyle = "#000";
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            for (let y = 0; y < DM_HEIGHT; y++) {
                for (let x = 0; x < DM_WIDTH; x++) {
                    const dx = x * rad * 2 + OUT_PAD;
                    const dy = y * rad * 2 + OUT_PAD;
                    const idx = x + y * BUF_WIDTH;

                    ctx.fillStyle = "#222";
                    ctx.beginPath();
                    ctx.arc(dx + rad, dy + rad, DOT_RADIUS, 0, Math.PI * 2);
                    ctx.fill();

                    if (mat[idx]) {
                        ctx.fillStyle = LED_COLOR;
                        ctx.shadowColor = LED_COLOR;
                        ctx.shadowBlur = rad + OUT_PAD;
                        ctx.beginPath();
                        ctx.arc(dx + rad, dy + rad, DOT_RADIUS, 0, Math.PI * 2);
                        ctx.fill();
                        ctx.shadowBlur = 0;
                    }
                }
            }
        }

        let lastTimestamp = 0;
        function animate(ts) {
            if (ts - lastTimestamp > 1000 / 30) {
                // update 30 fps max
                lastTimestamp = ts;

                // clear matrix data
                mat.fill(false);

                // update matrix with new frame
                if (scrollOffset <= -reviews[currentReview].length * (CHAR_WIDTH + CHAR_SPACE)) {
                    scrollOffset = DM_WIDTH;
                    currentReview = (currentReview + 1) % reviews.length;
                }

                text(scrollOffset, 0, reviews[currentReview]);
                scroll(-1);
                scrollOffset -= 1;

                drawMatrix();
            }
            requestAnimationFrame(animate);
        }

        requestAnimationFrame(animate);
    }, []);

    return (
        <div style={{ display: 'block', width: '100%' }}>
            <canvas ref={canvasRef} style={{ boxShadow: '0px 6px 28px rgba(0,0,0,0.8)' }} />
        </div>
    );
}
